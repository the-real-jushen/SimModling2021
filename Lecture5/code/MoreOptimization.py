# %% [markdown]
'''
# 更多优化

上一节课我们学习了基本的线性规划问题，还有一些非常简单的非线性规划。
但是实际问题有很多是难以容上节课学的只是解答的。问题难以线性化，优化的很熟十分不连续，没有办法求梯度等等。
那怎么办呢？

有很多时候没有什么好的办法，只有一个办法，就是试。不断地在求解域内尝试，直到找到你认为足够的一个解。

如果问题比较简单，你完全可以把所有的可行解全部找一遍，但是我们后面会看到，一些看似十分简单的问题，要把所有的答案是一边，
即使用世界上最快的计算机，在宇宙灭亡之前也不可能把所有的解算一遍。

这个时候只能通过一定的搜索，找到一个足够好的解，就完事了。那怎么保证我们搜索到的姐，足够好呢？
这个时候就要有一定的猜的技巧，也就是我们今天要讲的更高级的优化算法。

## exploration and exploitation dilemma

EE问题指的试在搜索最优解中的策略问题。我们之前见过，梯度下降算法，这个就是一个exploitation，
就是利用我们一致的信息，梯度，去找最小值，我们跟着梯度走肯定会越来越小，当我我们走到最小是的时候，梯度就=0了。
但是这个最小值可能是局部最小值，

![](./pics/pic25.png)
![](./pics/pic26.png)

我们要找到全局最优，就必须跳出这个局部最优解，到处去搜索一下。这个有有个问题，如果我们像没头苍蝇一样导出乱找，
那肯定也很难高效率的找到一个足够好的点，因为我们完全没有利用搜索时候获取的信息。

因此我们要再exploration和exploitation之间找到一个平衡。

今天讲的有的优化算法，都是以这个为核心的。
'''
# %% [markdown]
'''
## 模拟退火算法(Simulated Annealing, SA)

我们线看下面一个问题

>### 解数独
>一个数独的解法需遵循如下规则：  
> 1. 数字 1-9 在每一行只能出现一次。  
> 2. 数字 1-9 在每一列只能出现一次。  
> 3. 数字 1-9 在每一个以粗实线分隔的 3x3 宫格内只能出现一次。  

![](./pics/pic31.png)

我们先不管你平时是怎么做数独的，我们这里用优化的方法。数度为什么可以按成一个优化问题？我们可以把
解数独，看成是让每行每列每个九宫格重复的数字最少，当重复的数字为0的时候就解开了。

好我们现在看看怎么用模拟退火算法来解数独

'''

# %%
